{
    "title": "Day 4 — Design & Implementation with AI",
    "pages": [
      {
        "title": "Page 1: Design Thinking for AI Engineers",
        "type": "theory",
        "duration": "20 min",
        "content": "<h2>Mentor Introduction</h2><p>Say: “Welcome to build day! Today we turn all your PRD plans into real, working screens. But first — let’s think like designers, not just coders.”</p><h3>Objective</h3><ul><li>Understand how design fits inside the AI-accelerated SDLC</li><li>Learn what makes a UI effective for users</li><li>Use AI prompts to guide design decisions</li></ul><h3>Key Idea</h3><p>Design isn’t about making things pretty — it’s about solving the right problem clearly. AI helps us visualize and validate faster.</p><h3>Mini Activity (10 min)</h3><p>Ask: “Open your PRD. Which user problem does your first feature solve?” Write 1-line answers on sticky notes or Notion.</p><p>Now, in ChatGPT, type:</p><div class='code-block'><code>I'm designing a feature that [describe your feature]. Suggest 3 layout ideas that highlight the user's main action first.</code></div><p>Discuss results: which layouts feel most natural?</p><h3>Mentor Tip</h3><p>Reinforce: Good design is 80 % clarity, 20 % color. AI tools like <strong>V0.dev</strong> and <strong>ChatGPT</strong> will amplify clear thinking — not replace it.</p><h3>Deliverable</h3><p>✅ Students identify 1 key action per screen (documented in notebook or Miro)</p>"
      },
      {
        "title": "Page 2: Folder Structure & Frontend Architecture",
        "type": "theory",
        "duration": "20 min",
        "content": "<h2>Mentor Setup</h2><p>Say: “Before we build anything, we need a strong foundation. Let’s design our project folder like professionals do.”</p><h3>Goal</h3><ul><li>Learn modular frontend architecture for scale</li><li>Organize components, pages, and assets for AI-friendly coding</li></ul><h3>Demo (10 min)</h3><div class='code-block'><code>my-app/<br>├── app/<br>│   ├── page.tsx<br>│   ├── layout.tsx<br>│   └── globals.css<br>├── components/<br>│   ├── ui/<br>│   │   ├── Button.tsx<br>│   │   └── Card.tsx<br>│   ├── features/<br>│   │   └── Quotes/<br>│   │       ├── QuoteCard.tsx<br>│   │       └── index.tsx<br>├── hooks/<br>├── lib/<br>├── public/<br>├── README.md<br>└── package.json</code></div><p>Explain how Cursor or ChatGPT reads structure contextually, so clarity helps the AI generate better code.</p><h3>Mentor Prompt Example</h3><div class='code-block'><code>Understand this folder structure and create a reusable React component under /components/ui for cards with shadow and hover.</code></div><h3>Discussion</h3><p>Ask: “What happens if your project is messy and you use AI to refactor?” (Students will realize AI can mis-reference files.)</p><h3>Deliverable</h3><p>✅ Students recreate base folder structure in Cursor<br>✅ Commit: <code>chore: setup folder architecture</code></p>"
      },
      {
        "title": "Page 3: AI-Assisted UI Design (V0.dev + ChatGPT)",
        "type": "theory",
        "duration": "20 min",
        "content": "<h2>Mentor Introduction</h2><p>Say: “Now we’ll blend art and automation. We’ll let AI generate the first UI draft — and we’ll learn to critique it.”</p><h3>Objective</h3><ul><li>Use <strong>V0.dev</strong> to generate layout ideas visually</li><li>Use <strong>ChatGPT</strong> to generate UI specifications textually</li><li>Learn prompt patterns for consistent results</li></ul><h3>Live Demo (10 min)</h3><p>Go to <strong>v0.dev</strong> → New Generation → type:</p><div class='code-block'><code>Create a responsive dashboard for an AI Study App.<br>- Show 3 cards: Notes, Summaries, and Uploads<br>- Modern glassmorphism style<br>- Dark mode<br>- Tailwind CSS<br>- Add gradient header bar with user profile on top-right.</code></div><p>Display result on projector. Then copy JSX output into Cursor and preview locally.</p><h3>Compare Tools</h3><table><tr><th>Tool</th><th>Strength</th><th>Use Case</th></tr><tr><td>V0.dev</td><td>Visual layouts</td><td>UI prototyping</td></tr><tr><td>ChatGPT</td><td>Text-based logic, structure</td><td>Component specs</td></tr><tr><td>Cursor</td><td>Code generation & refinement</td><td>Implementation</td></tr></table><h3>Mini Challenge</h3><p>Ask: “Use V0 to redesign your home screen from PRD Day 3 — upload one screenshot to Discord.”</p><h3>Deliverable</h3><p>✅ V0 UI generated<br>✅ JSX exported<br>✅ Commit: <code>feat: add initial UI layout from V0</code></p>"
      },
      {
        "title": "Page 4: Generate Wireframes with AI",
        "type": "practical",
        "duration": "40 min",
        "content": "<h2>Mentor Opening</h2><p>Say: “Time to visualize your app idea! Today you’ll see your PRD come alive — AI will help us generate our first working wireframe.”</p><h3>Objective</h3><ul><li>Create a visual layout using <strong>V0.dev</strong> or <strong>ChatGPT + Figma</strong></li><li>Translate textual PRD ideas into layout components</li></ul><h3>Mentor Demo (10 min)</h3><p>Go to <strong>v0.dev</strong> and enter:</p><div class='code-block'><code>Create a responsive homepage for an AI Learning Assistant.<br>- Sidebar with icons (Home, Notes, AI Chat)<br>- Header with logo and profile menu<br>- Main section: Welcome message + CTA buttons<br>- Footer with social links<br>- Use Tailwind CSS and React components<br>- Keep spacing and typography clean</code></div><p>Show generated layout preview. Ask students to observe: placement, spacing, and text hierarchy.</p><h3>Hands-On Activity (25 min)</h3><ol><li>Each student opens <strong>v0.dev</strong> or <strong>ChatGPT 4 with Code Interpreter</strong>.</li><li>Use the same prompt but replace the theme with their own project name.</li><li>Export JSX → paste into <code>/components/layout</code> folder in Cursor.</li><li>Ask AI in Cursor: <code>Make this layout mobile responsive and apply consistent padding.</code></li></ol><h3>Mentor Tip</h3><p>Encourage them to tweak spacing manually after generation. Tell them: “AI gives 80% speed, you give the 20% taste.”</p><h3>Deliverable</h3><p>✅ Exported wireframe JSX<br>✅ Responsive layout verified<br>✅ Commit: <code>feat: add wireframe layout for main screen</code></p>"
      },
      {
        "title": "Page 5: Build Components with Cursor AI",
        "type": "practical",
        "duration": "40 min",
        "content": "<h2>Mentor Setup</h2><p>Say: “Now let’s bring your wireframe to life — we’ll build the real components using Cursor AI.”</p><h3>Objective</h3><ul><li>Implement UI components from design using Cursor’s inline AI</li><li>Understand how to iteratively refine generated code</li></ul><h3>Demo (10 min)</h3><p>In Cursor, open <code>components/ui/Card.tsx</code> and press <code>Cmd/Ctrl + K</code>:</p><div class='code-block'><code>Create a reusable Card component:<br>- Rounded corners, shadow, gradient background<br>- Props: title, description, icon<br>- Responsive width<br>- Tailwind CSS styling</code></div><p>Show Cursor’s output and explain: “Always review what AI writes — we are the editors, not copy-pasters.”</p><h3>Mentor Walkthrough</h3><ul><li>Generate Button and Navbar components next using similar patterns.</li><li>Ask ChatGPT to create consistent design tokens:</li></ul><div class='code-block'><code>Create a Tailwind config extension with custom colors:<br>primary: '#3b82f6',<br>accent: '#10b981'</code></div><h3>Student Activity (25 min)</h3><ol><li>Pick 2–3 components from their wireframe (e.g., HeroSection, CardGrid, Navbar)</li><li>Use Cursor to generate and refine them one by one.</li><li>Use Claude for debugging syntax errors.</li><li>Ask: “What’s one thing the AI got wrong and how did you fix it?”</li></ol><h3>Mentor Tip</h3><p>Encourage naming conventions: lowercase folders, PascalCase for components.</p><h3>Deliverable</h3><p>✅ Working UI components created<br>✅ Custom Tailwind theme applied<br>✅ Commit: <code>feat: add core UI components</code></p>"
      },
      {
        "title": "Page 6: Connect Mock API & Local Data",
        "type": "practical",
        "duration": "40 min",
        "content": "<h2>Mentor Opening</h2><p>Say: “A design without data is just a picture. Let’s make your UI interactive — we’ll connect it to mock APIs.”</p><h3>Objective</h3><ul><li>Create fake data and connect to UI</li><li>Learn to fetch and render using React hooks</li><li>Use AI to simulate backend endpoints</li></ul><h3>Mentor Demo (10 min)</h3><p>In Cursor terminal, run:</p><div class='code-block'><code>npm install json-server --save-dev</code></div><p>Then create <code>db.json</code>:</p><div class='code-block'><code>{<br>  \"quotes\": [<br>    { \"id\": 1, \"text\": \"AI doesn't replace developers, it multiplies them.\" },<br>    { \"id\": 2, \"text\": \"Prompt engineering is the new programming.\" }<br>  ]<br>}</code></div><p>Run local API:</p><div class='code-block'><code>npx json-server --watch db.json --port 4000</code></div><p>Test at: <code>http://localhost:4000/quotes</code></p><h3>Student Hands-On (25 min)</h3><ol><li>In <code>hooks/useQuotes.ts</code> write:</li></ol><div class='code-block'><code>export const useQuotes = () => {<br>  const [quotes, setQuotes] = useState([]);<br>  useEffect(() => {<br>    fetch('http://localhost:4000/quotes')<br>      .then(res => res.json())<br>      .then(setQuotes);<br>  }, []);<br>  return quotes;<br>}</code></div><p>Then map through the quotes inside the QuoteCard component.</p><h3>Mentor Tip</h3><p>Ask: “How could we replace this local API later with a real backend?” (Encourage thinking about modular code.)</p><h3>Optional Challenge</h3><p>Use Claude to write the API doc for this mock server:</p><div class='code-block'><code>Document this mock API including endpoints, response types, and future integration plan.</code></div><h3>Deliverable</h3><p>✅ Mock API connected<br>✅ Data rendering verified<br>✅ Commit: <code>feat: connect mock API to components</code></p>"
      },
      {
        "title": "Page 7: Styling & Responsiveness",
        "type": "practical",
        "duration": "40 min",
        "content": "<h2>Mentor Opening</h2><p>Say: “Our app works — now it needs to feel polished. Good design is invisible — it just feels right.”</p><h3>Objective</h3><ul><li>Make UI mobile-friendly and visually balanced</li><li>Learn Tailwind layout and animation tricks</li><li>Use AI to audit visual consistency</li></ul><h3>Mentor Demo (10 min)</h3><p>Show before/after example of a page with uneven spacing. Then type this prompt in Cursor:</p><div class='code-block'><code>Review this React component for design consistency. Suggest Tailwind improvements for spacing, color balance, and responsiveness.</code></div><p>Let students observe how Cursor refactors Tailwind classes — emphasize: <em>AI improves structure, not creative sense</em>.</p><h3>Student Hands-On (25 min)</h3><ol><li>Use ChatGPT or Claude: <code>Suggest 3 UI improvements that make my layout more modern and consistent.</code></li><li>Apply changes (consistent padding, shadows, text sizing).</li><li>Check on Chrome DevTools for mobile breakpoints.</li><li>Optional: add small fade/hover animations using Tailwind’s transition classes.</li></ol><h3>Mentor Tip</h3><ul><li>Remind: “Never style blindly — understand <em>why</em> it looks better.”</li><li>Give 3 design checks: spacing, alignment, readability.</li></ul><h3>Deliverable</h3><p>✅ Polished, responsive UI<br>✅ Smooth animations<br>✅ Commit: <code>style: enhance layout and responsiveness</code></p>"
      },
      {
        "title": "Page 8: Deploying Your Preview Build (Vercel & Render)",
        "type": "practical",
        "duration": "40 min",
        "content": "<h2>Mentor Setup</h2><p>Say: “Today’s magic moment — your first live build! Let’s deploy your project so the world can see it.”</p><h3>Objective</h3><ul><li>Deploy front-end build to Vercel (or Render for backend)</li><li>Verify build health</li><li>Learn to fix common deployment issues</li></ul><h3>Mentor Demo (10 min)</h3><ol><li>Open <a href='https://vercel.com'>Vercel.com</a> → Login with GitHub</li><li>Click <strong>New Project</strong> → Import your repo</li><li>Choose Framework: Next.js → click <strong>Deploy</strong></li><li>Wait 1–2 min → Show the live link (e.g., <code>https://ai-quote.vercel.app</code>)</li></ol><h3>Mentor Notes</h3><p>Explain what happens under the hood: Vercel pulls code → runs <code>npm build</code> → hosts static output globally.</p><h3>Common Errors</h3><ul><li><code>Build failed</code> → missing dependency</li><li><code>404</code> → wrong page routing</li><li>Slow load → missing <code>Image optimization</code></li></ul><h3>Student Activity (25 min)</h3><ol><li>Deploy app to Vercel using GitHub import.</li><li>Test deployed URL on phone.</li><li>Add the live link in README.md.</li><li>Optional: Deploy mock API separately on <strong>Render.com</strong>.</li></ol><h3>Mentor Tip</h3><p>Celebrate — this is their first public launch. Ask: “How does it feel to deploy your first AI-built app?”</p><h3>Deliverable</h3><p>✅ Live app on Vercel/Render<br>✅ README updated with link<br>✅ Commit: <code>docs: add live preview link</code></p>"
      },
      {
        "title": "Page 9: Reflection, Documentation & Showcase",
        "type": "practical",
        "duration": "40 min",
        "content": "<h2>Mentor Introduction</h2><p>Say: “Let’s slow down for the final stretch — reflection and sharing make your work truly valuable.”</p><h3>Objective</h3><ul><li>Reflect on today’s design journey</li><li>Document what was learned</li><li>Showcase the project publicly</li></ul><h3>Mentor Discussion (10 min)</h3><p>Ask: “What surprised you most about using AI to build?”<br>Collect 2–3 answers, note key lessons like: <em>‘AI helped me debug faster,’ ‘Prompting shapes quality,’ ‘I felt more confident shipping.’</em></p><h3>Documentation Task (15 min)</h3><ol><li>Create <code>README.md</code> section: <strong>‘Day 4 – Design & Implementation’</strong></li><li>Add:<ul><li>🧩 Screenshot of deployed UI</li><li>🧠 One insight from using AI tools</li><li>🔗 Live link to deployed project</li></ul></li><li>Commit: <code>docs: update README with final screenshots</code></li></ol><h3>Public Showcase (10 min)</h3><p>Have students post on LinkedIn or Discord:</p><div class='code-block'><code>🚀 Day 4 — Design & Implementation<br><br>✅ Built and deployed my first AI-powered UI using Cursor, ChatGPT, and V0.dev<br>💻 Live here: [link]<br>🧠 Lesson: AI helps you think visually, not just code faster.<br>#AIEngineering #BuildInPublic #NextJS #DesignThinking</code></div><p>Encourage adding a screenshot and tagging your bootcamp cohort.</p><h3>Mentor Wrap-Up (5 min)</h3><p>Say: “You just went from planning to a deployed prototype — that’s real engineering. Tomorrow, we’ll connect backend + automation logic.”</p><h3>Deliverables</h3><p>✅ README updated with screenshots<br>✅ Live link posted publicly<br>✅ Reflection file or post created</p><h3>Reflection Prompts</h3><ul><li>How did AI change your building speed today?</li><li>What part of the design process still needs human judgment?</li><li>If you rebuilt tomorrow, what would you do differently?</li></ul><h3>Next Steps</h3><p>Tomorrow → <strong>Day 5: Deployment & CI/CD Review</strong> — mastering automated pipelines.</p>"
      }
    ]
  }
  