{
  "title": "Day 2 — AI Tools & Prompt Engineering (Mentor Script)",
  "pages": [
    {
      "title": "Page 1: The Role of AI Copilots in Modern Development",
      "type": "theory",
      "duration": "20 min",
      "content": "<h2>Mentor Briefing</h2><p>Today’s goal is to move from ‘using AI’ to <strong>thinking with AI</strong>. Learners will see how copilots fit into a real developer workflow, how prompt engineering shapes outcomes, and how to build their first AI-assisted component.</p><h3>Opening Hook (Mentor Script)</h3><p>Ask the room: <em>‘If AI could write 70% of your code, what would you focus on instead?’</em> Let 2–3 students respond. Connect their answers to creativity, design, and debugging.</p><h3>Core Teaching Points</h3><ul><li><strong>Copilots augment, not replace</strong> — AI is your intern with infinite patience but zero context until you feed it one.</li><li><strong>Shift of responsibility</strong> — You move from syntax → strategy.</li><li><strong>Speed and iteration</strong> — 10× faster testing of ideas, but only when guided properly.</li></ul><h3>Demonstration (5 min)</h3><p>Open Cursor IDE → new JS file → prompt ChatGPT to create a simple counter app. Run it. Show how instant code appears, then point out what’s <em>missing</em> (comments, accessibility, tests). This gap is where human engineers matter.</p><h3>Mentor Notes</h3><ul><li>Pause here and emphasize that every AI model is only as good as the clarity of your instructions.</li><li>Encourage students to ask: ‘What context does AI need to perform this task safely?’</li></ul><h3>Student Reflection</h3><p>Write down one area where AI could save you an hour daily (e.g., boilerplate, docs, bug-fix).</p>"
    },
    {
      "title": "Page 2: Mapping AI Tools to SDLC Phases",
      "type": "theory",
      "duration": "20 min",
      "content": "<h2>Mentor Setup</h2><p>This section connects yesterday’s SDLC framework to today’s tool usage. Learners will understand <strong>which AI to use, when, and why</strong>.</p><h3>Teaching Flow</h3><ol><li>Draw the SDLC loop on the board: <strong>Plan → Design → Build → Test → Deploy → Iterate</strong>.</li><li>Ask: ‘Where could AI help most in each step?’</li><li>Reveal table below and discuss.</li></ol><h3>Tool-SDLC Mapping</h3><table><tr><th>Phase</th><th>Primary AI Tool</th><th>Example Use</th></tr><tr><td>Plan</td><td>ChatGPT</td><td>Generate PRDs, user stories, or architecture overviews.</td></tr><tr><td>Design</td><td>V0</td><td>Create visual wireframes and landing pages.</td></tr><tr><td>Build</td><td>Cursor</td><td>Scaffold components, manage code logic.</td></tr><tr><td>Test</td><td>Claude</td><td>Analyze errors, refactor, explain stack traces.</td></tr><tr><td>Deploy</td><td>ChatGPT + Vercel CLI</td><td>Generate CI/CD configs and troubleshoot deploys.</td></tr></table><h3>Mentor Demo</h3><p>Show Cursor’s inline chat. Type: <code>// TODO: Add form validation</code> → highlight line → use AI to generate code. Let students observe live coding speed.</p><h3>Interactive Q&A</h3><ul><li>Ask: Why not use ChatGPT for debugging?</li><li>Discuss Claude’s context limit advantage (handles large files).</li></ul><h3>Mentor Reflection Prompt</h3><p>‘If each AI tool were a team member, what role would each play?’ Let students list them: ChatGPT = planner, Cursor = builder, Claude = reviewer, V0 = designer.</p>"
    },
    {
      "title": "Page 3: Foundations of Prompt Engineering",
      "type": "theory",
      "duration": "20 min",
      "content": "<h2>Mentor Introduction</h2><p>This page teaches students to write better prompts — concise, contextual, and outcome-focused. The goal is not to memorize, but to <em>think in structure</em>.</p><h3>Storytelling Introduction</h3><p>Say: “Imagine you hire a junior dev from another planet who only understands exactly what you say. That’s your AI. If you miss one detail — wrong color, missing prop — it will still smile and give you garbage.”</p><h3>The Prompt Framework (3Cs)</h3><ul><li><strong>Context:</strong> Define purpose and tech stack (e.g., ‘You are a React engineer…’)</li><li><strong>Constraints:</strong> Add limits (e.g., ‘under 50 lines, Tailwind only’)</li><li><strong>Clarity:</strong> Use bullets, not prose</li></ul><h3>Example Activity</h3><p>Display this comparison:</p><pre>❌ “Make navbar responsive.”<br>✅ “Create a responsive React navbar using Tailwind, includes logo, links (Home, About, Contact), hamburger for mobile.”</pre><p>Have students rewrite two vague prompts they used yesterday using the 3C method.</p><h3>Mentor Discussion</h3><ul><li>Ask: What detail changes AI’s confidence most — tech stack, constraints, or tone?</li><li>Share sample prompt improvements live on projector.</li></ul><h3>Mini Practice</h3><p>Let students type a short prompt in ChatGPT for: “Create a dark-mode toggle component.” Have them compare results after refining it once.</p><h3>Mentor Tip</h3><p>Highlight how specificity and iteration create reliability — AI becomes predictable when trained with context.</p>"
    },
    {
      "title": "Page 4: Guided Build — Quote Generator Component",
      "type": "practical",
      "duration": "40 min",
      "content": "<h2>Mentor Objective</h2><p>Guide learners through building their first fully functional UI component using <strong>Cursor AI</strong>. Focus: generation → refinement → testing cycle.</p><h3>Setup (5 min)</h3><ol><li>Open the project from Day 1 (<code>hello-ai-engineer</code>).</li><li>Create folder <code>components/</code> → file <code>QuoteGenerator.tsx</code>.</li><li>Confirm Tailwind and TypeScript are working.</li></ol><h3>Mentor Demo (10 min)</h3><p>In Cursor, highlight inside the new file and type:</p><div class='code-block'><code>\"Create a React component named QuoteGenerator using TypeScript.<br>- Display random inspirational quotes<br>- 'Generate Quote' button<br>- Fade animation<br>- Loading spinner<br>- Tailwind CSS styling<br>- Responsive design\"</code></div><p>Run it. Explain the AI response: component structure, state logic, event handling.</p><h3>Mentor Notes</h3><ul><li>Pause after generation — ask students: “Which lines look AI-written?”</li><li>Explain code review mindset: treat AI output as a first draft.</li></ul><h3>Student Hands-On (20 min)</h3><ol><li>Each student modifies the component to include their own quotes.</li><li>Ask Cursor: <code>Add fade-in animation and gradient background</code>.</li><li>Run locally → verify interactivity.</li></ol><h3>Common Pitfalls & Fixes</h3><ul><li>Quotes not changing → missing <code>onClick</code>.</li><li>State not updating → wrong hook import.</li><li>Animation not smooth → missing Tailwind class.</li></ul><h3>Reflection Prompt</h3><p>“How long would this have taken yesterday without AI?” Collect answers (usually ×6 longer). Conclude: <em>‘Prompting is your new typing.’</em></p>"
    },
    {
      "title": "Page 5: Debugging with AI Assistance",
      "type": "practical",
      "duration": "40 min",
      "content": "<h2>Mentor Objective</h2><p>Train learners to treat AI as a debugging partner. Goal: replicate 3 realistic errors and fix them with AI guidance.</p><h3>Mentor Intro (3 min)</h3><p>Tell the class: “Today you’ll break your own app on purpose. Good engineers learn by fixing.”</p><h3>Planned Error Lab (25 min)</h3><ol><li><strong>Missing Import</strong> — Delete <code>useState</code> line. Ask Cursor:<br><code>App crashes: 'useState' is not defined. How do I fix this?</code></li><li><strong>Type Error</strong> — Change a state to <code>any</code> then back. Ask Claude to explain the error message and fix types.</li><li><strong>Tailwind Bug</strong> — Rename a class to <code>tailwind-broken</code>. Ask ChatGPT: <code>Styles not applying, why?</code></li></ol><h3>Mentor Flow</h3><ul><li>Let students debug 1 issue at a time using AI of choice.</li><li>Encourage them to paste the exact error message into AI chat.</li><li>Have 2–3 students share solutions on screen.</li></ul><h3>Discussion (5 min)</h3><p>Ask: “What patterns did AI use to solve errors?” Write keywords: <em>Explain → Suggest → Verify</em>.</p><h3>Mentor Tip</h3><p>Show the difference between Cursor (in-context) vs ChatGPT (copy-paste). Explain that contextual debugging is the future IDE paradigm.</p><h3>Deliverable</h3><p>Each student has a working QuoteGenerator with 3 debugged errors + commit <code>fix: resolved debugging exercise</code>.</p>"
    },
    {
      "title": "Page 6: Styling and UI Refinement with V0",
      "type": "practical",
      "duration": "40 min",
      "content": "<h2>Mentor Objective</h2><p>Introduce AI-assisted design thinking using V0.dev and Cursor. Students learn to translate visual ideas into code through prompts.</p><h3>Mentor Prep</h3><ul><li>Ensure V0.dev accounts are ready (GitHub login).</li><li>Demo 1 generation before students start — share screen.</li></ul><h3>Mentor Demo (10 min)</h3><p>Prompt V0:</p><div class='code-block'><code>\"Design a glassmorphism quote card for React with:<br>- Gradient blue-purple border<br>- Large serif quote text<br>- Lucide icon quote mark<br>- Subtle fade animation<br>- Tailwind CSS\"</code></div><p>Download generated JSX and merge into existing component in Cursor.</p><h3>Student Hands-On (25 min)</h3><ol><li>Students tweak colors and fonts via prompts like <code>Change gradient to green-teal</code>.</li><li>Install Lucide icons (<code>npm i lucide-react</code>).</li><li>Integrate design with existing logic → test responsiveness.</li></ol><h3>Mentor Checkpoint</h3><ul><li>Walk around the room — ensure each student has a unique visual variant.</li><li>Capture screenshots for showcase wall.</li></ul><h3>Design Reflection (5 min)</h3><p>Ask: “How did prompt wording change design quality?” Note key phrases like <em>glassmorphism, responsive, hover animation</em>.</p><h3>Deliverable</h3><p>Styled component committed with message:<br><code>feat(ui): add V0 design to QuoteGenerator</code></p>"
    },
    {
      "title": "Page 7: Testing & Quality Validation",
      "type": "practical",
      "duration": "40 min",
      "content": "<h2>Mentor Objective</h2><p>Students learn structured QA testing of their own AI-generated code and verify responsive performance.</p><h3>Mentor Script</h3><p>Say: “An <strong>AI Engineer</strong> doesn’t only generate — they <em>verify</em>. Testing turns guesswork into confidence.”</p><h3>Mentor Demo (10 min)</h3><ol><li>Run the app locally: <code>npm run dev</code></li><li>Open Chrome DevTools → device toolbar.</li><li>Show mobile → tablet → desktop transitions.</li><li>Use Lighthouse (Chrome Audits) → discuss performance score.</li></ol><h3>Student Activity (20 min)</h3><p>Give checklist:</p><ul><li>☑ Button generates new quote</li><li>☑ Spinner visible during loading</li><li>☑ Fade animation smooth</li><li>☑ No console errors</li><li>☑ Responsive at 375px / 768px / 1440px</li></ul><p>Students self-test, then peer test another student’s app.</p><h3>Mentor Tip</h3><ul><li>Have students screen-share any bug and use AI to explain cause → fix.</li><li>Demonstrate <code>ChatGPT Prompt:</code> “Review my component for performance issues and suggest optimizations.”</li></ul><h3>Class Discussion (5 min)</h3><p>Ask: “What kind of bugs did AI miss that humans caught?” → usually UI spacing or accessibility.</p><h3>Deliverable</h3><p>✅ Tested Quote Generator<br>✅ Screenshot of working version<br>✅ Peer review completed</p>"
    },
    {
      "title": "Page 8: Documentation & Commit Practices",
      "type": "practical",
      "duration": "40 min",
      "content": "<h2>Mentor Objective</h2><p>Teach version control hygiene and project documentation with AI help.</p><h3>Mentor Hook</h3><p>Ask: “If someone cloned your repo, could they understand your work in 2 minutes?”</p><h3>Mentor Demo (10 min)</h3><p>Ask ChatGPT to generate a README.md:</p><div class='code-block'><code>Write a README.md for a project 'AI Quote Generator' built with Next.js and Tailwind.<br>Include: intro, features, tech stack, installation, usage, credits.</code></div><p>Show how to paste it into the repo → preview on GitHub.</p><h3>Student Task (20 min)</h3><ol><li>Create or update README.md</li><li>Include screenshots and a short intro paragraph</li><li>Add credits: ChatGPT, Cursor, V0, Claude</li><li>Commit changes:<br><code>git add README.md<br>git commit -m \"docs: add project documentation\"<br>git push origin main</code></li></ol><h3>Mentor Guidance</h3><ul><li>Explain the importance of semantic commit messages: <code>feat:</code>, <code>fix:</code>, <code>docs:</code>.</li><li>Have 1–2 students read their README aloud; give feedback.</li></ul><h3>Mentor Tip</h3><p>Show example of <strong>bad</strong> vs <strong>good</strong> documentation.<br>❌ Bad: “Cool project.”<br>✅ Good: Explains purpose, usage, outcome, and AI role.</p><h3>Reflection</h3><p>Ask: “If AI wrote your README, did it truly represent your learning?” → Emphasize personalization.</p><h3>Deliverable</h3><p>✅ README committed<br>✅ Screenshot in /docs<br>✅ GitHub repo updated and pushed</p>"
    },
    {
      "title": "Page 9: Knowledge Reflection & Public Showcase",
      "type": "practical",
      "duration": "40 min",
      "content": "<h2>Mentor Objective</h2><p>Help learners document their progress and announce it publicly to build credibility and community.</p><h3>Mentor Script (Opening)</h3><p>Say: “If you don’t share your work, no one knows it exists. Building in public turns learning into opportunity.”</p><h3>Mentor Demo (5 min)</h3><p>Display sample LinkedIn post from projector:</p><div class='code-block'><code>🚀 Day 2 of my AI Engineer Journey!<br><br>Today I learned how to use AI copilots like Cursor, ChatGPT, and V0 to build a Quote Generator app.<br><br>Highlights:<br>• Generated functional React components in minutes<br>• Debugged with AI<br>• Styled UI using V0<br><br>💡 Lesson: Prompting is a coding skill.<br>🔗 Project: [GitHub link]<br>#AIEngineering #PromptEngineering #NextJS #BuildInPublic</code></div><h3>Student Activity (25 min)</h3><ol><li>Use ChatGPT to personalize their post: <code>Rewrite this post to match my tone, include one challenge I solved.</code></li><li>Add project screenshot.</li><li>Include GitHub link and 5 hashtags minimum.</li><li>Publish and comment on 2 peer posts.</li></ol><h3>Mentor Guidance</h3><ul><li>Walk around to help students structure posts that highlight learning, not perfection.</li><li>Ask: “What part of your prompt journey surprised you most?”</li></ul><h3>Group Reflection (5 min)</h3><p>Discuss takeaways:<ul><li>AI copilots save time but require precise thinking.</li><li>Prompt engineering is iterative, not one-shot.</li><li>Documentation and sharing build credibility.</li></ul></p><h3>Mentor Wrap-Up</h3><p>Congratulate students: “You’ve moved from consumer to <strong>AI creator</strong>. Tomorrow, we become planners — turning ideas into product specs.”</p><h3>Deliverables</h3><ul><li>✅ Public LinkedIn post with project link</li><li>✅ Commented on 2 peer posts</li><li>✅ Added GitHub link to LinkedIn featured section</li></ul><h3>End-of-Day Debrief</h3><p><strong>Key Outcomes:</strong></p><ol><li>Understand AI’s role across SDLC.</li><li>Master prompt engineering basics.</li><li>Built and styled a full component using AI.</li><li>Debugged with Cursor and Claude.</li><li>Documented and shared work publicly.</li></ol><p><strong>Next:</strong> Day 3 — Planning and Requirement Analysis with AI (writing your first PRD!)</p>"
    }
  ]
  
   
  
  
}
